import machine
import time
import urandom
import _thread as thread
import json

# Global values
light_intensity = None
button_pressed = False
response_time = None

# Define the button, built-in LED pins, and ADC for the photoresistor
button = machine.Pin(2, machine.Pin.IN)
led = machine.Pin(25, machine.Pin.OUT)
adc = machine.ADC(0)

response_times = []
intensities = []

# Thread to monitor light intensity
def monitor_light():
    while True:
        intensities.append(adc.read_u16())
        time.sleep(0.1)  # sample every 100 milliseconds

# Load parameters from the JSON file
with open('experiment_params.json', 'r') as file:
    params = json.loads(file.read())
    num_flashes = params["num_flashes"]

# Start the light monitoring thread
thread.start_new_thread(monitor_light, ())

for i in range(num_flashes):
    # Reset values
    button_pressed = False
    response_time = None
    
    # Wait for a random period of time between 1 to 5 seconds
    wait_time = urandom.randint(1, 5)
    time.sleep(wait_time)
    
    # Flash the built-in LED
    led.on()
    
    # Start the timer
    start_time = time.ticks_us()

    # Wait for the button to be pressed
    while not button_pressed:
        if button.value() == 1:
            button_pressed = True
            led.off()
            end_time = time.ticks_us()
            response_time = end_time - start_time
            response_times.append(response_time)
    
    # Wait a bit before the next loop
    time.sleep(2)

# Calculate stats
average_response_time = sum(response_times) / len(response_times)
min_response_time = min(response_times)
max_response_time = max(response_times)
missed_presses = num_flashes - len(response_times)

# Save to JSON
results = {
    "average_response_time": average_response_time,
    "min_response_time": min_response_time,
    "max_response_time": max_response_time,
    "missed_presses": missed_presses,
    "total_flashes": num_flashes
}

with open('response_times.json', 'w') as f:
    f.write(json.dumps(results))

with open('light_intensities.json', 'w') as f:
    f.write(json.dumps(intensities))

print("Test completed! Data saved.")
